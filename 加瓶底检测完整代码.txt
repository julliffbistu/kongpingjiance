#include "MySerial.h"
#include"opencv2/opencv.hpp"
#include "opencv2/imgproc/imgproc.hpp"
#include <iostream>

#define PI 3.1415926
using namespace cv;
using namespace std;



int main()
{
	Serial_open(_T("COM3"),9600);
	while(1)
	{
		double Time = (double)cvGetTickCount();
		Mat IMG=imread("C:\\Users\\zhulifu\\Desktop\\sanpai\\ceshi8.bmp");   ////,6,8需要需要限制为3，瓶子摆放有问题。摆正则没事。
		Mat img = imread("C:\\Users\\zhulifu\\Desktop\\sanpai\\pingdi\\pingdi2.bmp");//原图 
		if (!img.data && !IMG.data )
		{
			printf("请检查有没有该图片\n");
			return false;
		}

		if (!IMG.data == 0)
		{
			//imshow("IMG",IMG);
			int height = IMG.rows;
			int width = IMG.cols;
			Rect rect2(350,150, 850,850);  //1,2位数是起点，三四号位是跨度、、、、需要标定
			Mat image_roi = IMG(rect2);
			//imshow("jieququyu",image_roi);
			//-------------------------------------------------取得目标区域-------------------------------------------------------------
			Point center;
			Size axes;
			Mat gray;
			cvtColor(image_roi,gray,CV_BGR2GRAY);      //把image转换成灰度放到gray中
			Mat threshold_out;
			threshold( gray, threshold_out, 170, 255, CV_THRESH_BINARY );    //二值化结果影响椭圆检测 
			//imshow("qqwqwq",threshold_out);
			vector<vector<Point>> contours;
			vector<Vec4i> hierarchy;
			float midel_radius = 0,large_radius = 0, small_radius = 0;
			findContours(threshold_out, contours, hierarchy, CV_RETR_TREE, CHAIN_APPROX_SIMPLE, Point(0, 0));
			Mat cimage  = Mat::zeros(threshold_out.size(), CV_8UC3);
			for(size_t i = 0; i < contours.size(); i++)
			{
				//拟合的点至少为6
				size_t count = contours[i].size();
				if( count < 550 )   //去掉椭圆小于一定数量的圆,需调整
					continue;

				//椭圆拟合
				RotatedRect box = fitEllipse(contours[i]);
				center.x = cvRound(box.center.x);     /*确定椭圆box的值center、size、angle*/
				center.y = cvRound(box.center.y);

				axes.width = cvRound(box.size.width*0.5);
				axes.height = cvRound(box.size.height*0.5);
				box.angle = -box.angle;

				if(abs(axes.width-axes.height)<3)         //拟合多个圆，设定长短轴条件确定需要的圆2个，求这两个圆的长短轴并输出
				{
					drawContours(cimage , contours, (int)i, Scalar::all(255), 1, 8);
					ellipse(image_roi , box, Scalar(0,0,255), 1, CV_AA);
					//imshow("拟合椭圆结果", image_roi );
					//printf("中心位置：x=%d,y=%d\n",axes.width,axes.height);
					midel_radius = (axes.width+axes.height)/2;
					cout<<"中间半径为 ："<<midel_radius<<endl;
					float A_area = PI*axes.width*axes.height;
					float A_length = 2*PI*axes.height+4*(abs(axes.width-axes.height));
					float  circular_degree = (4*PI*A_area)/(A_length*A_length);
					cout<<"圆度为："<<circular_degree<<endl;
					if(midel_radius >240 && midel_radius<270)               //根据相机高度调节的参数，需要标定huantujiugai
					{
						small_radius= midel_radius;
					}
					else if(midel_radius > 270)
					{
						large_radius= midel_radius;
					}

					cout<<"-------------------------------------区分两个椭圆参数-----------------------------------------\n"<<endl;
				}
			}
			cout<<"small is :"<<small_radius<<"\n"<<"large is :"<<large_radius<<"\n"<<endl;
			//------------------------------------------------求内外径-------------------------------------------------------------
			if (small_radius == 0 || large_radius == 0 )
			{
				printf("this is a broken bottle !");
				Serial_write("11",sizeof("aa")-1);
			}
			else
			{
			float INNERstanderd_bottle_r = 17.6,OUTstanderd_bottle_r = 25.6;
			

			
			//float UPDOWN_deflection = 0.2;  要求下线

			float pixcel_area =  0.04339; //标定
			float INNERCircle_radius =small_radius*pixcel_area*2 - 3.5743;
			float OUTCircle_radius =large_radius*pixcel_area*2; //标定的值
			cout<<"内圆的半径为 ："<<INNERCircle_radius<<endl;
			cout<<"外圆的半径为 ："<<OUTCircle_radius<<endl;
			
			}
		}
printf("**************************  瓶口检测完毕*********************************");	

		if(!img.data == 0)
		{

			int height_high = img.rows;
			int width_high = img.cols;
			//cout<<"【瓶口图像的尺寸大小长度为】:"<<height<<endl;
			//cout<<"【瓶口图像的尺寸大小宽度为】:"<<width<<endl;
			Rect rect(280,250, 950,750);  //1,2位数是起点，三四号位是跨度
			img = img(rect);//
			//imshow("yuantu",img);
			Mat cvtColor_output;//灰度图
			cvtColor(img, cvtColor_output, CV_BGR2GRAY);
			Mat threshold_output;//二值图
			threshold(cvtColor_output, threshold_output, 200, 255, CV_THRESH_BINARY);  //100参数修改，调节二值化参数
			//imshow("threshold_output",threshold_output);
			bitwise_not(threshold_output,threshold_output);
			//imshow("threshold_output1",threshold_output);

			vector<vector<Point>> contours;
			vector<Vec4i> hierarcy;
			findContours(threshold_output, contours, hierarcy, CV_RETR_TREE, CV_CHAIN_APPROX_NONE);
			//cout << "num=" << contours.size() << endl;
			double area = 0;
			int i;
			double area_max = contourArea(contours[0]);
			//cout<<"-----------"<<area_max<<endl;
			for (i = 0; i<contours.size(); i++)
			{
				drawContours(img, contours, i, Scalar(0, 0, 255), 2, 8);
				area = contourArea(contours[i]);//计算第i个轮廓的面积
				//cout<<"area"<<area<<endl;
				
				if (area_max > area)
				{
					area_max = area_max;
				}
				else
				{
					area_max = contourArea(contours[i]);
				}
			}
			cout<<"\n area_max is :"<<area_max<<endl;
			
			if (area_max > 2000)
			{
				printf("There has impurity at the bottom of the bottle.");
				Serial_write("00",sizeof("aa")-1);
			}
			else
			{
				printf("There is no impurity at the bottom of the bottle.");	
			}
		//imshow("dst", img);
		}
		//waitKey(0);
		cout<<"-------------------------------结束-----------------------------------\n"<<endl;
		Time = (double)cvGetTickCount() - Time ;
		printf( "run time = %gms\n", Time /(cvGetTickFrequency()*1000) );
	}
}